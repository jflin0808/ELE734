; July 11, 2005, Hsu Ho, CMC, modified file to support varactor and RF MOS
; February 15, 2000, Hsu Ho, CMC, corrected error so MOS parameters are checked
;                                 and m factor is properly handled.


(lvsRules 
    procedure((parallelMos m1 m2) 
	prog((mt) 
	    (mt = ncons(nil)) 
	    if(((m1->l) && (m2->l)) 
		(mt->l = ((float((m1->l)) + float((m2->l))) / 2.0))
	    ) 
	    if(((m1->m) && (m1->w)) 
		(m1->w = (float((m1->w)) * float((m1->m))))
	    ) 
	    if(((m2->m) && (m2->w)) 
		(m2->w = (float((m2->w)) * float((m2->m))))
	    ) 
	    if(((m1->w) && (m2->w)) 
		(mt->w = (float((m1->w)) + float((m2->w))))
	    ) 
	    mt->m=1
	    return(mt)
	)
    ) 
    procedure((parallelRFMos m1 m2) 
	prog((mt) 
	    (mt = ncons(nil)) 
	    if(((m1->lr) && (m2->lr)) 
		(mt->lr = ((float((m1->lr)) + float((m2->lr))) / 2.0))
	    ) 
	    if(((m1->nr) && (m1->wr)) 
		(m1->wr = (float((m1->wr)) * float((m1->nr))))
	    ) 
	    if(((m2->nr) && (m2->wr)) 
		(m2->wr = (float((m2->wr)) * float((m2->nr))))
	    ) 
	    if(((m1->wr) && (m2->wr)) 
		(mt->wr = (float((m1->wr)) + float((m2->wr))))
	    ) 
	    mt->nr=1
	    return(mt)
	)
    ) 
    procedure((parallelNMOSCap m1 m2) 
	prog((mt) 
	    (mt = ncons(nil)) 
	    if(((m1->lr) && (m2->lr)) 
		(mt->lr = ((float((m1->lr)) + float((m2->lr))) / 2.0))
	    ) 
	    if(((m1->mr) && (m1->wr)) 
		(m1->wr = (float((m1->wr)) * float((m1->mr))))
	    ) 
	    if(((m2->mr) && (m2->wr)) 
		(m2->wr = (float((m2->wr)) * float((m2->mr))))
	    ) 
	    if(((m1->wr) && (m2->wr)) 
		(mt->wr = (float((m1->wr)) + float((m2->wr))))
	    ) 
	    mt->mr=1
	    return(mt)
	)
    ) 
    procedure((parallelCap m1 m2) 
	prog((mt) 
	    (mt = ncons(nil)) 
	    if(((m1->c) && (m2->c)) 
		(mt->c = (float((m1->c)) + float((m2->c))))
	    ) 
	    if(((m1->a) && (m2->a)) 
		(mt->a = (float((m1->a)) + float((m2->a))))
	    ) 
	    return(mt)
	)
    ) 
    procedure((seriesCap m1 m2) 
	prog((mt) 
	    (mt = ncons(nil)) 
	    if(((m1->c) && (m2->c)) 
		(mt->c = ((float((m1->c)) * float((m2->c))) / (float((m1->c)) + float((m2->c)))))
	    ) 
	    if(((m1->a) && (m2->a)) 
		(mt->a = ((float((m1->a)) * float((m2->a))) / (float((m1->a)) + float((m2->a)))))
	    ) 
	    return(mt)
	)
    ) 
    procedure((parallelRes m1 m2) 
	prog((mt) 
	    (mt = ncons(nil)) 
	    if(((m1->r) && (m2->r)) 
		(mt->r = ((float((m1->r)) * float((m2->r))) / (float((m1->r)) + float((m2->r)))))
	    ) 
	    return(mt)
	)
    )
    procedure((seriesRes m1 m2) 
	prog((mt) 
	    (mt = ncons(nil)) 
	    if(((m1->r) && (m2->r)) 
		(mt->r = (float((m1->r)) + float((m2->r))))
	    ) 
	    return(mt)
	)
    ) 
    procedure((compareMosLW m1 m2) 
	prog((x length width) 
	    (x = nil) 
	    (length = nil) 
	    (width = nil) 
	    if(((m1->m) && (m1->w)) 
		(m1->w = (float((m1->w)) * float((m1->m))))
	    ) 
	    if(((m2->m) && (m2->w)) 
		(m2->w = (float((m2->w)) * float((m2->m))))
	    ) 

	    if(((m1->w) && (m2->w)) then 
		if((abs(((m1->w) - (m2->w))) > (0.02 * (m2->w))) then 
		    sprintf(width "MOS width mismatch: %g(extracted) vs %g(schematic)." 
			float((m1->w)) 
			float((m2->w))
		    )
		) else 
		sprintf(width "no MOS width specified in schematic or extracted.")
	    )
	    if(((m1->l) && (m2->l)) then 
		if((abs(((m1->l) - (m2->l))) > (0.02 * (m2->l))) then 
		    sprintf(length "MOS length mismatch: %g(extracted) vs %g(schematic).\n" 
			float((m1->l)) 
			float((m2->l))
		    )
		) else 
		sprintf(length "no MOS length specified in schematic or extracted. \n")
	    ) 
	    if(width then 
		(x = width) 
		when(length 
		    (x = strcat(width length))
		) else
		when(length 
		    (x = length)
		)
	    ) 
	    return(x)
	)
    ) 
    procedure((compareRFMosLW m1 m2) 
	prog((x length width) 
	    (x = nil) 
	    (length = nil) 
	    (width = nil) 
	    if(((m1->nr) && (m1->wr)) 
		(m1->wr = (float((m1->wr)) * float((m1->nr))))
	    ) 
	    if(((m2->nr) && (m2->wr)) 
		(m2->wr = (float((m2->wr)) * float((m2->nr))))
	    ) 

	    if(((m1->wr) && (m2->wr)) then 
		if((abs(((m1->wr) - (m2->wr))) > (0.02 * (m2->wr))) then 
		    sprintf(width "MOS width mismatch: %g(extracted) vs %g(schematic)." 
			float((m1->wr)) 
			float((m2->wr))
		    )
		) else 
		sprintf(width "no MOS width specified in schematic or extracted.")
	    )
	    if(((m1->lr) && (m2->lr)) then 
		if((abs(((m1->lr) - (m2->lr))) > (0.02 * (m2->lr))) then 
		    sprintf(length "MOS length mismatch: %g(extracted) vs %g(schematic).\n" 
			float((m1->lr)) 
			float((m2->lr))
		    )
		) else 
		sprintf(length "no MOS length specified in schematic or extracted. \n")
	    ) 
	    if(width then 
		(x = width) 
		when(length 
		    (x = strcat(width length))
		) else
		when(length 
		    (x = length)
		)
	    ) 
	    return(x)
	)
    ) 
    procedure((compareNMOSCapLW m1 m2) 
	prog((x length width) 
	    (x = nil) 
	    (length = nil) 
	    (width = nil) 
	    if(((m1->mr) && (m1->wr)) 
		(m1->wr = (float((m1->wr)) * float((m1->mr))))
	    ) 
	    if(((m2->mr) && (m2->wr)) 
		(m2->wr = (float((m2->wr)) * float((m2->mr))))
	    ) 

	    if(((m1->wr) && (m2->wr)) then 
		if((abs(((m1->wr) - (m2->wr))) > (0.02 * (m2->wr))) then 
		    sprintf(width "MOS width mismatch: %g(extracted) vs %g(schematic)." 
			float((m1->wr)) 
			float((m2->wr))
		    )
		) else 
		sprintf(width "no MOS width specified in schematic or extracted.")
	    )
	    if(((m1->lr) && (m2->lr)) then 
		if((abs(((m1->lr) - (m2->lr))) > (0.02 * (m2->lr))) then 
		    sprintf(length "MOS length mismatch: %g(extracted) vs %g(schematic).\n" 
			float((m1->lr)) 
			float((m2->lr))
		    )
		) else 
		sprintf(length "no MOS length specified in schematic or extracted. \n")
	    ) 
	    if(width then 
		(x = width) 
		when(length 
		    (x = strcat(width length))
		) else
		when(length 
		    (x = length)
		)
	    ) 
	    return(x)
	)
    ) 
    procedure((compareCapValue m1 m2) 
	prog((x) 
	    (x = nil) 
	    if(((m1->c) && (m2->c)) 
		if((abs(((m1->c) - (m2->c))) > (0.02 * (m2->c))) 
		    sprintf(x "capacitor value mismatch : %g(extracted) vs %g(schematic). \n" 
			float((m1->c)) 
			float((m2->c))
		    )
		) 
		sprintf(x "no cap value specified in schematic or extracted. \n")
	    ) 
	    return(x)
	)
    ) 
    procedure((compareResValue m1 m2) 
	prog((x) 
	    (x = nil) 
	    if(((m1->r) && (m2->r)) 
		if((abs(((m1->r) - (m2->r))) > (0.02 * (m2->r))) 
		    sprintf(x "resistor value mismatch: %g(extracted) vs %g(schematic). \n" 
			float((m1->r)) 
			float((m2->r))
		    )
		) 
		sprintf(x "no resistor value specified in schematic or extracted. \n")
	    ) 
	    return(x)
	)
    ) 
    (permuteDevice parallel "nfet" parallelMos)
    (permuteDevice parallel "nfet_rf" parallelRFMos)
    (permuteDevice parallel "pfet_rf" parallelRFMos)
    (permuteDevice parallel "3Vpfet_rf" parallelRFMos)
    (permuteDevice parallel "3Vnfet_rf" parallelRFMos)
    (permuteDevice parallel "nfet_na" parallelMos)
    (permuteDevice parallel "pfet" parallelMos)
    (permuteDevice parallel "3Vnfet" parallelMos)
    (permuteDevice parallel "3Vnfet_na" parallelMos)
    (permuteDevice parallel "3Vpfet" parallelMos)
    (permuteDevice parallel "capacitor" parallelCap) 
    (permuteDevice series "capacitor" seriesCap) 
    (permuteDevice parallel "mimcap" parallelCap) 
    (permuteDevice parallel "nmoscap" parallelNMOSCap) 
    (permuteDevice parallel "3Vnmoscap" parallelNMOSCap) 
    (permuteDevice series "mimcap" seriesCap) 
    (permuteDevice parallel "resistor" parallelRes) 
    (permuteDevice series "resistor" seriesRes)
    (pruneDevice general ("pfet_rf" "nfet_rf" "3Vpfet_rf" "3Vnfet_rf" "pfet" "nfet" "nfet_na" "3Vnfet" "3Vpfet" "3Vnfet_na")) 
    (compareDeviceProperty "pfet" compareMosLW) 
    (compareDeviceProperty "pfet_rf" compareRFMosLW) 
    (compareDeviceProperty "nfet_rf" compareRFMosLW) 
    (compareDeviceProperty "3Vnfet_rf" compareRFMosLW) 
    (compareDeviceProperty "3Vpfet_rf" compareRFMosLW) 
    (compareDeviceProperty "nmoscap" compareNMOSCapLW) 
    (compareDeviceProperty "3Vnmoscap" compareNMOSCapLW) 
    (compareDeviceProperty "nfet" compareMosLW)
    (compareDeviceProperty "nfet_na" compareMosLW)
    (compareDeviceProperty "3Vnfet" compareMosLW)
    (compareDeviceProperty "3Vnfet_na" compareMosLW)
    (compareDeviceProperty "3Vpfet" compareMosLW)
    (compareDeviceProperty "capacitor" compareCapValue) 
    (compareDeviceProperty "mimcap" compareCapValue)
    (compareDeviceProperty "resistor" compareResValue)
)
